
volumes:
  n8n_storage:
  n8n_binary_data:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open_webui_data:
  # Zusätzliche Volumes für erweiterte Funktionen
  monitoring_storage:
  backup_storage:

networks:
  demo:
    driver: bridge
  web:
    external: true

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: 
    - demo
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    
    # HTTP/IP Einstellungen (ohne Domain/HTTPS)
    - N8N_SECURE_COOKIE=false
    - N8N_HOST=0.0.0.0
    - N8N_PROTOCOL=http
    - N8N_PORT=5678
    - WEBHOOK_URL=http://217.154.225.184:5678
    - N8N_PROXY_HOPS=1
    - N8N_TRUSTED_PROXY_IPS=["0.0.0.0/0"]
    - N8N_DISABLE_UI=false
    
    # High-Performance Konfiguration für 24GB RAM
    - N8N_PAYLOAD_SIZE_MAX=32
    - N8N_CONCURRENCY_LIMIT=50
    - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
    - N8N_BINARY_DATA_STORAGE_PATH=/data/shared/files
    - N8N_WORKERS_AUTO_FIX_TIMEOUT=300
    - N8N_EXECUTIONS_DATA_MAX_AGE=336
    
    # Quality of Life
    - N8N_RUNNERS_ENABLED=true
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_HIRING_BANNER_ENABLED=false
    - GENERIC_TIMEZONE=Europe/Berlin
    - N8N_METRICS_INCLUDE_API_ENDPOINTS=true
    # Authentication enabled
    - N8N_USER_MANAGEMENT_DISABLED=false
    - N8N_BASIC_AUTH_ACTIVE=false
    
    # Ollama Integration
    - OLLAMA_HOST=ollama:11434
  env_file:
    - .env
  restart: unless-stopped
  # Flexible Ressourcen - 24GB RAM System
  mem_reservation: 1g    # Garantiert 1GB minimum, kann bis zu 10GB+ nutzen
  # Kein mem_limit - kann bei Bedarf mehr RAM nutzen
  # Kein cpus-limit - kann alle 6 CPU-Kerne nutzen

services:
  postgres:
    image: postgres:16-alpine
    networks: [demo]
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # PostgreSQL Optimierungen für 24GB RAM System
      - POSTGRES_SHARED_BUFFERS=6GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=18GB
      - POSTGRES_WORK_MEM=16MB
      - POSTGRES_MAINTENANCE_WORK_MEM=2GB
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_MAX_WORKER_PROCESSES=6
      - POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER=3
      - POSTGRES_MAX_PARALLEL_WORKERS=6
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Flexible Ressourcen
    mem_limit: 8g          # Sicherheitslimit für DB
    mem_reservation: 2g    # Garantiert 2GB für DB-Operations
    # CPU wird dynamisch geteilt

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    networks:
      - demo
      - web
    ports:
      - "5678:5678"  # Direkter Zugriff über IP:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - n8n_binary_data:/data/shared/files
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`217.154.225.184`) && PathPrefix(`/n8n`)"
      - "traefik.http.routers.n8n.tls=false"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  qdrant:
    image: qdrant/qdrant:latest
    hostname: qdrant
    container_name: qdrant
    networks: 
      - demo
    restart: unless-stopped
    ports:
      - "6333:6333"  # Direkter Zugriff über IP:6333
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__ENABLE_CORS=true
      # Performance-Optimierungen für große Vector-Datasets
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=128
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=6
      - QDRANT__STORAGE__OPTIMIZERS__DEFAULT_SEGMENT_NUMBER=4
    volumes:
      - qdrant_storage:/qdrant/storage
    # Flexible Ressourcen für große Vector-Operationen
    mem_reservation: 1g    # Kann bei großen Vector-Operationen mehr nehmen
    # Kein mem_limit - kann bei Bedarf viel RAM für große Embeddings nutzen

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    hostname: ollama
    networks: [demo]
    restart: unless-stopped
    ports:
      - "11434:11434"  # Direkter Zugriff über IP:11434
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_ORIGINS=*
      # High-End Performance für 24GB RAM / 6 CPU
      - OLLAMA_MAX_LOADED_MODELS=4
      - OLLAMA_NUM_PARALLEL=6
      - OLLAMA_KEEP_ALIVE=30m
      - OLLAMA_FLASH_ATTENTION=1
      - OLLAMA_MAX_QUEUE=50
    volumes:
      - ollama_storage:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    # Flexible Ressourcen - Hauptverbraucher
    mem_reservation: 6g    # Garantiert 6GB, kann bis zu 20GB+ für große Modelle nutzen
    # Kein mem_limit - kann bei großen Modellen fast allen RAM nutzen
    # Kein cpus-limit - kann alle 6 CPU-Kerne für Inferenz nutzen

  ollama-setup:
    image: ollama/ollama:latest
    networks: [demo]
    container_name: ollama-setup
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        sleep 30
        # Basis-Modelle (klein und effizient)
        OLLAMA_HOST=ollama:11434 ollama pull llama3.2:3b
        OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text:latest
        
        # Alle wichtigen LLM-Modelle für 24GB RAM System
        OLLAMA_HOST=ollama:11434 ollama pull llama3.1:70b
        OLLAMA_HOST=ollama:11434 ollama pull codellama:34b
        OLLAMA_HOST=ollama:11434 ollama pull codellama:13b
        OLLAMA_HOST=ollama:11434 ollama pull mixtral:8x7b
        OLLAMA_HOST=ollama:11434 ollama pull mistral:7b
        OLLAMA_HOST=ollama:11434 ollama pull phi3:14b
        OLLAMA_HOST=ollama:11434 ollama pull neural-chat:7b
        OLLAMA_HOST=ollama:11434 ollama pull gemma2:9b
        OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:14b
        OLLAMA_HOST=ollama:11434 ollama pull deepseek-coder:6.7b
        OLLAMA_HOST=ollama:11434 ollama pull llama3.2-vision:11b
        
        echo "Models downloaded successfully"
    depends_on:
      ollama:
        condition: service_healthy

  # Open WebUI - Deutsche ChatGPT-ähnliche Oberfläche für Ollama
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    hostname: open-webui
    networks: 
      - demo
    restart: unless-stopped
    ports:
      - "3001:8080"  # WebUI über IP:3001
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-secret-key-change-me}
      - DEFAULT_LOCALE=en-US
      - DEFAULT_MODELS=llama3.2:3b,mistral:7b,codellama:13b
      - ENABLE_SIGNUP=false
      - ENABLE_LOGIN_FORM=true
      - ENABLE_WEB_SEARCH=false
      - ENABLE_LOCAL_WEB_FETCH=true
      - WEBUI_AUTH=true
      - WEBUI_NAME="AI Chat"
      - WEBUI_URL=http://217.154.225.184:3001
      - ENABLE_ADMIN_EXPORT=false
      - ENABLE_ADMIN_CHAT_ACCESS=false
      - ENABLE_COMMUNITY_SHARING=false
      - SHOW_ADMIN_DETAILS=false
      - ENABLE_MODEL_FILTER=false
      - ENABLE_API_KEY=false
      - WEBUI_AUTH_TRUSTED_EMAIL_HEADER=""
      - DEFAULT_USER_ROLE=admin
      - ENABLE_OAUTH_SIGNUP=false
      - OAUTH_MERGE_ACCOUNTS_BY_EMAIL=false
    volumes:
      - open_webui_data:/app/backend/data
    depends_on:
      ollama:
        condition: service_healthy
    # Flexible Ressourcen
    mem_reservation: 512m
    mem_limit: 2g

  # VPS Dashboard - Hauptübersicht aller Services  
  dashboard:
    build: ./dashboard
    container_name: vps-dashboard
    hostname: dashboard
    networks: 
      - demo
      - web
    restart: unless-stopped
    ports:
      - "3000:80"  # Dashboard über IP:3000
    volumes:
      - ./dashboard:/var/www/html:rw
      - ./themes:/var/www/html/themes:ro
    environment:
      - APACHE_DOCUMENT_ROOT=/var/www/html
    # Minimal resources
    mem_reservation: 128m
    mem_limit: 512m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`217.154.225.184`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.tls=false"
      - "traefik.http.services.dashboard.loadbalancer.server.port=80"

  # Optional: Monitoring Stack für Ressourcen-Überwachung
  # Auskommentiert - bei Bedarf aktivieren
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   hostname: prometheus
  #   networks: [demo, web]
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - monitoring_storage:/prometheus
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   mem_reservation: 512m
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prometheus.rule=Host(`prometheus.avantera-digital.de`)"
  #     - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
  #     - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   hostname: grafana
  #   networks: [demo, web]
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   volumes:
  #     - monitoring_storage:/var/lib/grafana
  #   mem_reservation: 256m
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.avantera-digital.de`)"
  #     - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
  #     - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Automatisierte Backups
  # backup:
  #   image: postgres:16-alpine
  #   container_name: backup-service
  #   networks: [demo]
  #   restart: "no"
  #   volumes:
  #     - backup_storage:/backup
  #     - postgres_storage:/var/lib/postgresql/data:ro
  #     - n8n_storage:/n8n_backup:ro
  #     - qdrant_storage:/qdrant_backup:ro
  #     - ollama_storage:/ollama_backup:ro
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - BACKUP_RETENTION_DAYS=30
  #   command: >
  #     bash -c "
  #       echo 'Starting backup process...'
  #       pg_dump -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} | 
  #       gzip > /backup/postgres_$$(date +%Y%m%d_%H%M%S).sql.gz
  #       tar -czf /backup/n8n_workflows_$$(date +%Y%m%d_%H%M%S).tar.gz /n8n_backup
  #       tar -czf /backup/qdrant_vectors_$$(date +%Y%m%d_%H%M%S).tar.gz /qdrant_backup
  #       find /backup -name '*.gz' -mtime +30 -delete
  #       echo 'Backup completed successfully'
  #     "
